buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'


group 'wallet-java-sdk'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8


sourceCompatibility = 1.8

jar {
    archiveName = 'wallet-java-sdk.jar'
}

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    compile("org.springframework.boot:spring-boot-devtools")
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
    compile("com.alibaba:druid:1.0.29")
    compile("org.apache.commons:commons-lang3:3.7")
    compile("com.google.code.gson:gson:2.8.0")
    runtime('mysql:mysql-connector-java')
    compile('com.squareup.okhttp3:okhttp:3.10.0')
    compile('com.google.guava:guava:24.1-jre')
    compile('com.sun.jna:jna:3.0.9')
    compile('redis.clients:jedis:2.9.0')
    compileOnly('org.projectlombok:lombok')

    compile('org.springframework.boot:spring-boot-starter-test')
    // https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.2'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.56'

    // https://mvnrepository.com/artifact/org.python/jython
    compile group: 'org.python', name: 'jython', version: '2.7.0'

    //compile("log4j:log4j:1.2.17")
    compile("dom4j:dom4j:1.6")
    compile('org.apache.httpcomponents:httpclient:4.5.6')
    compile('commons-net:commons-net:1.4.1')

    compile group: 'org.web3j', name: 'core', version: '3.1.1'
    compile group: 'org.web3j', name: 'crypto', version: '3.1.1'
    compile group: 'org.web3j', name: 'utils', version: '3.1.1'

    compile group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.14.7'
    compile "ch.qos.logback:logback-core:1.2.3"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    compile group: 'cn.hutool', name: 'hutool-all', version: '5.5.1'
    compile group: 'co.nstant.in', name: 'cbor', version: '0.9'

    // 开发
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'

    //swagger2依赖
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    // https://mvnrepository.com/artifact/net.i2p.crypto/eddsa
    compile group: 'net.i2p.crypto', name: 'eddsa', version: '0.3.0'
}

//def getDbProperties = {
//    def properties = new Properties()
//    file("src/main/resources/application-dev.properties").withInputStream { inputStream ->
//        properties.load(inputStream)
//    }
//    properties
//}

/*
task mybatisGenerate{
	def properties = getDbProperties()
	ant.properties['driverClass'] = properties.getProperty("spring.datasource.driver-class-name")
	ant.properties['connectionURL'] = properties.getProperty("spring.datasource.url")
	ant.properties['userId'] = properties.getProperty("spring.datasource.username")
	ant.properties['password'] = properties.getProperty("spring.datasource.password")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true, configfile: 'src/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
		}
	}
}
*/
